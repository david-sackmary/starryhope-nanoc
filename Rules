#!/usr/bin/env ruby
require 'compass'

# Create new items for each of our tags
preprocess do
  tags = Set.new

  articles.each do |item|
    item[:tags].each { |t| tags.add(t) } if item[:tags]
  end

  tags.each do |tag|
    items << Nanoc::Item.new(
      "",
      { :tag => tag },
      "/tags/#{slugify(tag)}/")
  end
end

Compass.add_project_configuration 'config/compass.rb'

BYPASS_FILES = %w(crossdomain.xml humans.txt robots.txt) unless defined?(BYPASS_FILES)
IMAGE_COMPRESS_ENABLE = false
IMAGE_COMPRESS_OPTIONS = { :pngout => false } unless defined?(IMAGE_COMPRESS_OPTIONS)

# Compilation Rules

BYPASS_FILES.each do |file|
  compile("/#{file.sub /\..+/, ''}/") do
    # don't filter bypass files
  end
end

compile '/assets/sass/app/' do
  filter :sass, Compass.sass_engine_options
end

compile '/assets/sass/*' do
  # dont' filter or layout
end

compile '/i/*' do
  if IMAGE_COMPRESS_ENABLE
    filter :image_compressor, IMAGE_COMPRESS_OPTIONS if item.binary?
  end
end

compile '/assets/images/*' do
  # dont' filter or layout
end

compile '/assets/javascripts/lib/*' do
  # dont' filter or layout
end

compile '/assets/javascripts/vendor/*' do
  filter :uglify_js
end

compile '/assets/javascripts/*' do
  filter :concat_js
  filter :uglify_js
end

compile '/articles/*' do
  filter :kramdown, :auto_ids => false
  layout 'article'
end

compile '/tags/*/' do
  filter :erb
  layout 'tags'
end

compile '/atom/' do
  filter :erb
end

compile '/sitemap/' do
  filter :erb
end

compile '*' do
  if item.binary?
    # donâ€™t filter binary items
  else
    case item[:extension]
    when 'md'
      filter :erb
      filter :kramdown, :auto_ids => false
    when 'haml'
      filter :haml
    when 'erb'
      filter :erb
    else
      filter :erb
    end
    layout item[:layout] || 'default'
  end
end

# Routes

route '/assets/sass/app/' do
  '/assets/css/app.css'
end

route '/assets/sass/*' do
  nil
end

route '/assets/images/*' do
  item.identifier.chop + "." + item[:extension]
end

route '/assets/javascripts/vendor/*' do
  item.identifier.chop + '.js'
end

route '/assets/javascripts/lib/*' do
  nil
end

route '/assets/javascripts/*' do
  item.identifier.chop + '.js'
end

route '/articles/*' do
  item.identifier.gsub('/articles', '') + 'index.html'
end

route '/atom/' do
  '/atom.xml'
end

route '/sitemap/' do
  '/sitemap.xml'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
